<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
	<!--It is to tell Spring MVC to scan classes under a certain package -->
	<context:component-scan base-package="com.rr" />
	<context:component-scan base-package="com.springmvc.services" />

	<!-- The <annotation-driven/> element does several things, including registering 
		beans to support request processing with annotated controller methods. Note 
		: Without <annotation-driven/>, the <resources/> elements will prevent any 
		controller from being invoked. You donâ€™t need an <annotation-driven/> element 
		if you are not using resources elements. -->
	<mvc:annotation-driven enable-matrix-variables="true"/> <!-- enable matrix variable support by setting enable-matrix-variables to true  -->

	<!--The<resources/> element tells Spring MVC which static resources need 
		to be served independently from the dispatcher servlet. . The first makes 
		sure that all files in the /css directory will be visible -->
	<mvc:resources mapping="/css/**" location="/css/" />
		
		<mvc:resources  location="/resources/"  mapping="/resource/**"/>
	<!-- The second allows displaying of all .html files in the application 
		directory.
		the /** symbol indicates the recursive look for any resource files underneath the base resource directory -->
	<mvc:resources mapping="/*.html" location="/" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- externalize the label message   -->
	<bean id= "messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	   <property name="basename" value="messages"/> <!--  this is the name of the property file that we created in  -->
	</bean>
	
	
	<!-- THIS class determines whether the given request contains multipart content or not and parses the given HTTP request into multipart files and parameters -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	
		<property name="maxUploadSize" value="10240000"/>
	</bean>
	
	
	<!-- ContentNegotiatingViewResolver does not resolve views itself. Instead, it delegates to other views based on the request
	that makes it possible to serve a different representation of the same resource.  -->
	
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	  <property name="defaultViews">
    <list>
    <!-- we just added the bean reference for the JSON view and XML view under thedefaultViews property -->
		<ref bean="jsonView"/>
   		 <ref bean="xmlView"/>
    </list>
	</property>
</bean>

<!-- for JSON view -->
   <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
	  <property name="prettyPrint" value="true"/>
</bean>

<!-- XML view  -->

	<bean id="xmlView" class="org.springframework.web.servlet.view.xml.MarshallingView">
	  <constructor-arg>
	    <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
	      <property name="classesToBeBound">
	        <list>
	          <value>com.rr.domain.Product</value>
	        </list>
	      </property>
	    </bean>
	  </constructor-arg>
</bean>

	
</beans>